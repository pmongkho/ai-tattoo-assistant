services:
  backend:
    build:
      context: .
      dockerfile: dotnet-server/Dockerfile
    ports:
      - '5000:5000'
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USERNAME};Password=${DB_PASSWORD}
      - OpenAI__ApiKey=${OPENAI_API_KEY}
      - OpenAI__AiModel=${OPENAI_MODEL}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=${JWT_ISSUER}
      - JwtSettings__Audience=${JWT_AUDIENCE}
      - ResendApiToken=${ResendApiToken}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}

    volumes:
      - keys:/root/.aspnet/DataProtection-Keys
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./angular-client
      dockerfile: Dockerfile
      args:
        - API_URL_DEV=${ANGULAR_API_URL_DEV}
        - API_URL_PROD=${ANGULAR_API_URL_PROD}
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - ResendApiToken=${ResendApiToken}
    ports:
      - '4200:80'
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  keys:
